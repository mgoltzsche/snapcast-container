# DO NOT EDIT THIS FILE MANUALLY!
# This file is maintained within the upstream kpt package (see Kptfile).
# Committing manual changes to this file, disables blueprint updates.

KPT_IMAGE ?= mgoltzsche/kpt-docker:1.0.0-beta.21
KPT_PKG_UPDATE_STRATEGY ?= resource-merge
SKAFFOLD_IMAGE ?= gcr.io/k8s-skaffold/skaffold/v2:v2.0.0-beta1
SKAFFOLD_OPTS ?=
KUBECONFIG ?= $$HOME/.kube/config
SVU_IMAGE ?= ghcr.io/caarlos0/svu:v1.9.0

DOCKER ?= docker
PLATFORM_ARCH = $(shell uname -m | sed -E 's!x86_64!amd64!')
PLATFORM_OS = $(shell uname -o | sed -E 's!GNU/(Linux)!\1!' | tr '[:upper:]' '[:lower:]')
PLATFORM ?= $(PLATFORM_OS)/$(PLATFORM_ARCH)
PLATFORMS = $(shell grep kubemate.mgoltzsche.github.com/platforms: skaffold.yaml | sed -E 's!\s+kubemate.mgoltzsche.github.com/platforms: +!!')
DRY_RUN ?= false

.PHONY: all
all: image

##@ Build

.PHONY: image
image: skaffold-build ## Build the image(s) for the host architecture.

##@ Deploy

.PHONY: deploy
deploy: skaffold-run ## Deploy the application into the selected cluster.
.PHONY: undeploy
undeploy: skaffold-delete ## Undeploy the debug application.

.PHONY: debug
debug: SKAFFOLD_OPTS = --auto-build
debug: skaffold-debug ## Deploy the application in debug mode.

##@ Development

.PHONY: render
render: kpt-fn-render ## Run kpt render pipeline, applying setters.yaml.
kpt-fn-render: kpt-fn-%:
	$(DOCKER) run -i --rm -u "`id -u`:`id -g`" --group-add 998 \
		-v "/var/run/docker.sock:/var/run/docker.sock" \
		-v "`pwd`:/workspace" \
		$(KPT_IMAGE) fn $* /workspace --truncate-output=false

.PHONY: update
update: kpt-pkg-update render ## Apply the latest blueprint updates to this codebase.

kpt-pkg-update:
	mkdir -p $$HOME/.kpt
	$(DOCKER) run --rm -u "`id -u`:`id -g`" -v "$$HOME/.kpt:/.kpt" \
		-v `pwd`:/data -w /data \
		$(KPT_IMAGE) pkg update --strategy=$(KPT_PKG_UPDATE_STRATEGY) .

skaffold-debug skaffold-dev: DOCKER_RUN_OPTS = -ti
skaffold-debug skaffold-dev skaffold-run skaffold-stop skaffold-delete: DOCKER_RUN_OPTS += --mount "type=bind,src=$(KUBECONFIG),dst=/tmp/.kube/config,ro"
skaffold-run skaffold-stop skaffold-build skaffold-dev skaffold-delete skaffold-debug skaffold-survey skaffold-help: skaffold-%:
	$(DOCKER) run $(DOCKER_RUN_OPTS) --rm -v "`pwd`:/workspace" -w /workspace --network=host \
		-v "/var/run/docker.sock:/var/run/docker.sock" \
		--mount "type=bind,src=$$HOME/.docker,dst=/tmp/.docker" \
		-e HOME=/tmp \
		$(SKAFFOLD_IMAGE) skaffold $* $(SKAFFOLD_OPTS)

.PHONY: help
help: ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Release

# TODO: align image tags, pin within manifests

.PHONY: push-image
push-image: REGISTRY ?= ghcr.io
push-image: SKAFFOLD_OPTS += --push --platform=$(PLATFORMS) --default-repo=$(REGISTRY)
push-image: render require-clean-worktree skaffold-build ## Build and push the multi-arch image(s).

.PHONY: binfmt-config
binfmt-config: ## Enable multi-arch support on the host.
	$(DOCKER) run --rm --privileged multiarch/qemu-user-static:7.0.0-7 --reset -p yes

.PHONY: release-maybe
release-maybe: require-clean-worktree ## Publish a new release if there are releasable commits.
	$(eval NEXT_VERSION = $(shell docker run --rm -v $$PWD:/tmp -w /tmp $(SVU_IMAGE) next --no-build || echo 0.0.0))
	$(eval CURR_VERSION = $(shell docker run --rm -v $$PWD:/tmp -w /tmp $(SVU_IMAGE) current || echo 0.0.0))
	@{ if [ "$(NEXT_VERSION)" = "$(CURR_VERSION)" ] && [ ! "$(NEXT_VERSION)" = 0.0.0 ]; then \
		echo Skipping release since there are no release-worthy commits.; \
	else \
		make release VERSION="`echo $(NEXT_VERSION) | sed -E s/^v//`"; \
	fi \
	}

.PHONY: release
release: ## Publish a new release with given VERSION [and DRY_RUN=true].
	@{ \
	set -eu; \
	TMPDIR=`mktemp -d --suffix -kubemate-app-release`; \
	STATUS=0; ( \
	echo Releasing $$VERSION... && \
	cp -r . $$TMPDIR && \
	cd $$TMPDIR && \
	([ -d .git ] || git init . >/dev/null) && \
	(set -x && \
	make manifest-image render && \
	([ "`git config user.name`" ] || git config user.name github-actions) && \
	git add . && \
	git commit -m 'Release $(VERSION)' && \
	git tag -a v$(VERSION) -m 'Release $(VERSION)') && \
	export SKAFFOLD_OPTS='-t latest -t $(VERSION) --platform=$(PLATFORMS)' && \
	([ "$(DRY_RUN)" = true ] && echo Skipping push && make image || ( \
		make push-image && \
		git push && \
		git push --tags && \
		echo pushed=true > $${GITHUB_OUTPUT:-/tmp/kubemate-app-release-fake-out} && \
		cd "$(CURDIR)" && \
		git pull --tags \
	))) || STATUS=1; \
	rm -rf $$TMPDIR; \
	exit $$STATUS; \
	}

release-test: ## Release dry run.
	make release VERSION=dev DRY_RUN=true

manifest-image:
	@[ ! "$(VERSION)" = '' ] || (echo no VERSION specified >&2; false)
	$(DOCKER) run --rm -v "$$PWD":/workdir -u "`id -u`:`id -g`" -e VERSION mikefarah/yq:4.29.2 -i '.data.version = env(VERSION)' setters.yaml

.PHONY: require-clean-worktree
require-clean-worktree:
	@[ -z "`git status --untracked-files=no --porcelain`" ] || (\
		echo 'ERROR: the build changed files that are tracked by git:'; \
		git status --untracked-files=no --porcelain | sed -E 's/^/  /'; \
		echo 'Please run `make render` and commit the resulting changes!'; \
		false) >&2
